#include <bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	struct Node* next;
};

struct Node* newNode(int data)
{
	struct Node* newnode = new Node();
	newnode->data = data;
	newnode->next = NULL;

	return newnode;
}

struct check
{
	bool operator()(
		struct Node* a, struct Node* b)
	{
		return a->data > b->data;
	}
};

struct Node* mergelists(struct Node* arr[], int n)
{

	priority_queue<Node*, vector<Node*>, check> pq;

	for (int i = 0; i < n; i++)
		if (arr[i] != NULL)
			pq.push(arr[i]);

	if (pq.empty())
		return NULL;

	struct Node *dummy = newNode(0);
	struct Node *last = dummy;


	while (!pq.empty())
	{

		struct Node* cur = pq.top();
		pq.pop();
		last->next = cur;
		last = last->next;
		if (cur->next != NULL)
		pq.push(cur->next);
	}
	return dummy->next;
}

void print(struct Node* head)
{
	while (head != NULL)
	{
		cout << head->data << " ";
		head = head->next;
	}
}


int main()
{
	int n=3;


	Node* arr[n];

	arr[0] = newNode(1);
	arr[0]->next = newNode(4);
	arr[0]->next->next = newNode(5);


	arr[1] = newNode(1);
	arr[1]->next = newNode(3);
	arr[1]->next->next = newNode(4);

	arr[2] = newNode(2);
	arr[2]->next = newNode(6);


	struct Node* head = mergelists(arr, n);

	print(head);

	return 0;
}
